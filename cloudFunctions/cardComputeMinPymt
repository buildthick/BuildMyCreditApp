// Field calculated in this cloudFunction:
// minimumPayment

const functions = require('firebase-functions');
const admin = require('firebase-admin');
// To avoid deployment errors, do not call admin.initializeApp() in your code

exports.cardComputeMinPymt = functions
  .region('us-central1')
  .firestore
  .document('user_credit_cards/{cardId}')
  .onWrite(async (change, context) => {
    const beforeData = change.before.exists ? change.before.data() : null;
    const afterData  = change.after.exists  ? change.after.data()  : null;

    // If the doc was deleted, bail
    if (!afterData) {
      console.log(`cardComputeMinPymt: deleted, skipping ${context.params.cardId}`);
      return null;
    }

    const oldBalance = beforeData?.totalBalance;
    const newBalance = afterData.totalBalance;

    // Skip if totalBalance is missing or hasn't changed
    if (newBalance == null) {
      console.log(`cardComputeMinPymt: totalBalance missing on ${context.params.cardId}, skipping`);
      return null;
    }
    if (oldBalance === newBalance) {
      console.log(`cardComputeMinPymt: totalBalance unchanged (${newBalance}) on ${context.params.cardId}, skipping`);
      return null;
    }

    // Compute 10%
    const newMin = newBalance * 0.10;
    const oldMin = afterData.minimumPayment;

    // Skip if already up-to-date
    if (oldMin === newMin) {
      console.log(`cardComputeMinPymt: minimumPayment already ${newMin} on ${context.params.cardId}, skipping`);
      return null;
    }

    // Write it
    try {
      await change.after.ref.update({ minimumPayment: newMin });
      console.log(`cardComputeMinPymt: updated minimumPayment â†’ ${newMin} on ${context.params.cardId}`);
    } catch (err) {
      console.error(`cardComputeMinPymt: ERROR updating on ${context.params.cardId}:`, err);
    }

    return null;
  });
