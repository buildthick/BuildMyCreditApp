// This version correctly computes Current_Value where
// AccountType_Variation = Current accounts / lates AND
// AccountType_Variation = Revolving % of total
// AccountType_Variation = Utilization
// AccountType_Variation = Number of CFA or AF Cards with 0 Balance
    // NOTE: this^ returns null if no CFA/AFs exist, and 0 when at least 1 exists but has 0 balance
// AccountType_Variation = Minimum 1 loan
// AccountType_Variation = Minimum 1 card
// AccountType_Variation = Latest allowable open
// AccountType_Variation = Latest allowable close

const functions = require('firebase-functions');
const admin = require('firebase-admin');
// To avoid deployment errors, do not call admin.initializeApp() in your code

exports.computeUserConstraintCurrentValues = functions.region('us-central1').https.onCall(
  async (data, context) => {
    // 1) Auth check
    const uid = context.auth && context.auth.uid;
    if (!uid) {
      throw new functions.https.HttpsError('unauthenticated','Must be signed in.');
    }
    const db = admin.firestore();

    // Helper: get Y/M/D in America/New_York for a Date
    function getNYCDateParts(date) {
      const fmt = new Intl.DateTimeFormat('en-US', {
        timeZone: 'America/New_York',
        year: 'numeric',
        month: 'numeric',
        day: 'numeric',
      });
      const parts = fmt.formatToParts(date);
      let y, m, d;
      for (const p of parts) {
        if (p.type === 'year')  y = +p.value;
        if (p.type === 'month') m = +p.value;
        if (p.type === 'day')   d = +p.value;
      }
      return { y, m, d };
    }

    try {
      // --- 1) Current Accounts / Lates ratio ---
      const currentSnap = await db
        .collection('user_stocks_conso')
        .where('stock','in',['user_credit_cards','user_loans'])
        .where('isCurrent','==',true)
        .get();
      const numberCurrentAccounts = currentSnap.size;

      const latesSnap = await db
        .collection('user_stocks_conso')
        .where('stock','in',[
          'user_credit_cards_late_payments',
          'user_loans_late_payments',
          'user_collections_3rd_party'
        ])
        .get();
      const numberLates = latesSnap.size;

      const rawCAL = numberLates===0
        ? numberCurrentAccounts
        : numberCurrentAccounts/numberLates;
      const calRatio = parseFloat(rawCAL.toFixed(4));

      // --- 2) Revolving % of total ---
      const revSnap = await db
        .collection('user_stocks_conso')
        .where('subStock','==','Revolving')
        .get();
      let totalRevolving=0, revDocs=[];
      revSnap.forEach(doc=>{
        const s=doc.data().stock;
        if(s!=='user_hard_pulls'&&s!=='user_credit_cards_late_payments'){
          totalRevolving++;
          revDocs.push(doc);
        }
      });

      const instSnap = await db
        .collection('user_stocks_conso')
        .where('subStock','==','Installment')
        .get();
      let totalInstallment=0;
      instSnap.forEach(doc=>{
        const s=doc.data().stock;
        if(s!=='user_hard_pulls'&&s!=='user_loans_late_payments'){
          totalInstallment++;
        }
      });

      const totalAccounts=totalRevolving+totalInstallment;
      const rawRevPct= totalAccounts===0?0:totalRevolving/totalAccounts;
      const revPct=parseFloat(rawRevPct.toFixed(4));

      // --- 3) Utilization (balance ÷ credit limit) ---
      let totalCreditLimit=0,totalBalance=0;
      revDocs.forEach(doc=>{
        const d=doc.data();
        totalCreditLimit += d.creditLimit||0;
        totalBalance     += d.amountsOwed||0;
      });
      const rawUtil = totalCreditLimit===0?0:totalBalance/totalCreditLimit;
      const utilization = parseFloat(rawUtil.toFixed(4));

      // --- 4) Number of CFA or AF Cards with 0 Balance ---
      const afSnap = await db
        .collection('user_stocks_conso')
        .where('stock','==','user_credit_cards')
        .where('isAnnualFee','==',true)
        .get();
      const totalAF = afSnap.size;
      const cfaSnap = await db
        .collection('user_stocks_conso')
        .where('stock','==','user_credit_cards')
        .where('isCFA','==',true)
        .get();
      const totalCFA = cfaSnap.size;
      const totalCFA_AF = totalAF + totalCFA;
      const zbSnap = await db
        .collection('user_stocks_conso')
        .where('stock','==','user_credit_cards')
        .where('amountsOwed','==',0)
        .get();
      let numZeroBalanceCFAorAF=0;
      zbSnap.forEach(doc=>{
        const d=doc.data();
        if(d.isAnnualFee||d.isCFA) numZeroBalanceCFAorAF++;
      });
      const valueCFA_AF = totalCFA_AF===0? null : numZeroBalanceCFAorAF;

      // --- 5) Minimum 1 loan ---
      const loansSnap = await db
        .collection('user_stocks_conso')
        .where('stock','==','user_loans')
        .get();
      const numLoans = loansSnap.size;

      // --- 6) Minimum 1 card ---
      const cardsSnap = await db
        .collection('user_stocks_conso')
        .where('stock','==','user_credit_cards')
        .get();
      const numCards = cardsSnap.size;

      // --- 7) Months until target (NYC normalized) ---
      const now = new Date();
      const nowParts = getNYCDateParts(now);
      const nowNorm  = new Date(nowParts.y, nowParts.m - 1, nowParts.d);

      // fetch live target_date
      const userSnap = await db.collection('users').doc(uid).get();
      const targetMs = userSnap.data().target_date.toMillis();
      const targetRaw = new Date(targetMs);
      const tgtParts  = getNYCDateParts(targetRaw);
      const tgtNorm   = new Date(tgtParts.y, tgtParts.m - 1, tgtParts.d);

      let yearDiff   = tgtNorm.getFullYear()  - nowNorm.getFullYear();
      let monthDiff  = tgtNorm.getMonth()     - nowNorm.getMonth();
      let totalMonths= yearDiff*12 + monthDiff;

      let dayDiff = tgtNorm.getDate() - nowNorm.getDate();
      if(dayDiff<0){
        totalMonths--;
        const daysInPrev = new Date(
          tgtNorm.getFullYear(),
          tgtNorm.getMonth(),
          0
        ).getDate();
        dayDiff += daysInPrev;
      }

      const daysInMonth = new Date(
        tgtNorm.getFullYear(),
        tgtNorm.getMonth()+1,
        0
      ).getDate();

      const monthsUntilTarget = parseFloat(
        (totalMonths + dayDiff/daysInMonth).toFixed(2)
      );

      // --- prepare batch ---
      const batch = db.batch();

      // write metrics 1–6
      const mapping = {
        'Current accounts / lates': calRatio,
        'Revolving % of total': revPct,
        'Utilization': utilization,
        'Number of CFA or AF Cards with 0 Balance': valueCFA_AF,
        'Minimum 1 loan': numLoans,
        'Minimum 1 card': numCards
      };
      for(const [variation,value] of Object.entries(mapping)){
        const snap = await db
          .collection('user_plan_target_constraints')
          .where('AccountType_Variation','==',variation)
          .get();
        snap.forEach(doc=>{
          if(doc.data().Current_Value!==value){
            batch.set(
              db.collection('user_plan_target_constraints').doc(doc.id),
              { Current_Value: value },
              { merge:true }
            );
          }
        });
      }

      // write monthsUntilTarget to both open & close
      const openSnap = await db
        .collection('user_plan_target_constraints')
        .where('AccountType_Variation','==','Latest allowable open')
        .get();
      const closeSnap = await db
        .collection('user_plan_target_constraints')
        .where('AccountType_Variation','==','Latest allowable close')
        .get();

      for(const snap of [openSnap, closeSnap]){
        snap.forEach(doc=>{
          if(doc.data().Current_Value!==monthsUntilTarget){
            batch.set(
              db.collection('user_plan_target_constraints').doc(doc.id),
              { Current_Value: monthsUntilTarget },
              { merge:true }
            );
          }
        });
      }

      // commit all updates
      await batch.commit();

      return { success: true, monthsUntilTarget };
    } catch(err) {
      console.error('Error computing current values:',err);
      throw new functions.https.HttpsError('internal', err.message||'Unknown error');
    }
  }
);
