const functions = require('firebase-functions');
const admin = require('firebase-admin');
// To avoid deployment errors, do not call admin.initializeApp() in your code

exports.writeUserConstraintData = functions.region('us-central1').https.onCall(
  async (data, context) => {
    // 1) Auth check
    const uid = context.auth && context.auth.uid;
    if (!uid) {
      throw new functions.https.HttpsError('unauthenticated', 'Must be signed in.');
    }

    const db = admin.firestore();

    try {
      // 2) Load static templates
      const staticSnap = await db
        .collection('plan_target_constraints')
        .get();

      // 3) Load existing user copies
      const userSnap = await db
        .collection('user_plan_target_constraints')
        .get();
      const existingIds = new Set(userSnap.docs.map(doc => doc.id));

      // 4) Batch new writes for missing docs
      const batch = db.batch();
      let written = 0;

      staticSnap.forEach(doc => {
        const id = doc.id;
        if (!existingIds.has(id)) {
          const src = doc.data();
          const destRef = db
            .collection('user_plan_target_constraints')
            .doc(id);

          // Copy static fields verbatim
          batch.set(destRef, src);
          written++;
        }
      });

      // 5) Commit if needed
      if (written > 0) {
        await batch.commit();
      }

      return { success: true, attempted: staticSnap.size, written };
    } catch (err) {
      console.error('Error copying constraints:', err);
      throw new functions.https.HttpsError(
        'internal',
        err.message || 'Unknown error'
      );
    }
  }
);
