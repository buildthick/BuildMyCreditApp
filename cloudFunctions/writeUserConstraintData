const functions = require('firebase-functions');
const admin = require('firebase-admin');
// To avoid deployment errors, do not call admin.initializeApp() in your code

exports.writeUserConstraintData = functions.region('us-central1').https.onCall(
  async (data, context) => {
    // 1) Auth check
    const uid = context.auth && context.auth.uid;
    if (!uid) {
      throw new functions.https.HttpsError('unauthenticated', 'Must be signed in.');
    }

    const db = admin.firestore();
    const userRef = db.collection('users').doc(uid);

    try {
      // 2) Load user's target_date and convert to ms
      const userSnap = await userRef.get();
      if (!userSnap.exists || !userSnap.data().target_date) {
        throw new functions.https.HttpsError(
          'failed-precondition',
          'User document is missing a target_date field.'
        );
      }
      const rawTarget = userSnap.data().target_date;
      const targetMs = rawTarget.toMillis
        ? rawTarget.toMillis()
        : new Date(rawTarget).getTime();

      // 3) Load static templates
      const staticSnap = await db
        .collection('plan_target_constraints')
        .get();

      // 4) Load existing user-specific copies
      const userSnap2 = await db
        .collection('user_plan_target_constraints')
        .get();
      const existing = {};
      userSnap2.forEach(doc => {
        existing[doc.id] = doc.data();
      });

      // 5) Batch writes for missing docs, missing userRef, or outdated Interval
      const batch = db.batch();
      let written = 0;

      staticSnap.forEach(doc => {
        const id = doc.id;
        const src = doc.data();
        const old = existing[id];

        // Determine new Interval
        const newInterval = src.Dependency_Type === 'Action latest date'
          ? targetMs
          : src.Interval;

        // Check if write is needed
        const needsWrite = 
          !old ||
          old.userRef?.id !== uid ||
          old.Interval !== newInterval;

        if (needsWrite) {
          const destRef = db
            .collection('user_plan_target_constraints')
            .doc(id);

          batch.set(
            destRef,
            {
              ...src,
              userRef: userRef,
              Interval: newInterval
            },
            { merge: true }
          );
          written++;
        }
      });

      // 6) Commit batch if needed
      if (written > 0) {
        await batch.commit();
      }

      return { success: true, attempted: staticSnap.size, written };
    } catch (err) {
      console.error('Error in writeUserConstraintData:', err);
      throw new functions.https.HttpsError(
        'internal',
        err.message || 'Unknown error'
      );
    }
  }
);
