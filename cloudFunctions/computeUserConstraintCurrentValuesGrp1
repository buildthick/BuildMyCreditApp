// This version correctly computes group 1 (open and close action constraints) Current_Value where
// AccountType_Variation = Current accounts / lates AND
// AccountType_Variation = Revolving % of total
// AccountType_Variation = Utilization
// AccountType_Variation = Number of CFA or AF Cards with 0 Balance
    // NOTE: this^ returns null if no CFA/AFs exist, and 0 when at least 1 exists but has 0 balance
// AccountType_Variation = Latest allowable open
// AccountType_Variation = Latest allowable close
// AccountType_Variation = Yearly allowable
// AccountType_Variation = Monthly allowable
// AccountType_Variation = Min interval between opens in LTM

const functions = require('firebase-functions');
const admin = require('firebase-admin');
// To avoid deployment errors, do not call admin.initializeApp() in your code

exports.computeUserConstraintCurrentValuesGrp1 = functions.region('us-central1').https.onCall(
  async (data, context) => {
    // 1) Auth check
    const uid = context.auth && context.auth.uid;
    if (!uid) {
      throw new functions.https.HttpsError('unauthenticated', 'Must be signed in.');
    }
    const db = admin.firestore();

    // Helper: extract NYC local Y/M/D
    function getNYCDateParts(date) {
      const fmt = new Intl.DateTimeFormat('en-US', {
        timeZone: 'America/New_York',
        year: 'numeric',
        month: 'numeric',
        day: 'numeric',
      });
      const parts = fmt.formatToParts(date);
      let y, m, d;
      parts.forEach(p => {
        if (p.type === 'year')  y = +p.value;
        if (p.type === 'month') m = +p.value;
        if (p.type === 'day')   d = +p.value;
      });
      return { y, m, d };
    }

    try {
      // --- 1) Current Accounts / Lates ratio ---
      const currentSnap = await db
        .collection('user_stocks_conso')
        .where('stock', 'in', ['user_credit_cards','user_loans'])
        .where('isCurrent', '==', true)
        .get();
      const numberCurrentAccounts = currentSnap.size;

      const latesSnap = await db
        .collection('user_stocks_conso')
        .where('stock', 'in', [
          'user_credit_cards_late_payments',
          'user_loans_late_payments',
          'user_collections_3rd_party'
        ])
        .get();
      const numberLates = latesSnap.size;

      const rawCAL = numberLates === 0
        ? numberCurrentAccounts
        : numberCurrentAccounts / numberLates;
      const calRatio = parseFloat(rawCAL.toFixed(4));

      // --- 2) Revolving % of total ---
      const revSnap = await db
        .collection('user_stocks_conso')
        .where('subStock', '==', 'Revolving')
        .get();
      let totalRevolving = 0;
      const revDocs = [];
      revSnap.forEach(doc => {
        const s = doc.data().stock;
        if (s !== 'user_hard_pulls' && s !== 'user_credit_cards_late_payments') {
          totalRevolving++;
          revDocs.push(doc);
        }
      });

      const instSnap = await db
        .collection('user_stocks_conso')
        .where('subStock', '==', 'Installment')
        .get();
      let totalInstallment = 0;
      instSnap.forEach(doc => {
        const s = doc.data().stock;
        if (s !== 'user_hard_pulls' && s !== 'user_loans_late_payments') {
          totalInstallment++;
        }
      });

      const totalAccounts = totalRevolving + totalInstallment;
      const rawRevPct = totalAccounts === 0
        ? 0
        : totalRevolving / totalAccounts;
      const revPct = parseFloat(rawRevPct.toFixed(4));

      // --- 3) Utilization (balance รท credit limit) ---
      let totalCreditLimit = 0, totalBalance = 0;
      revDocs.forEach(doc => {
        const d = doc.data();
        totalCreditLimit += (d.creditLimit || 0);
        totalBalance     += (d.amountsOwed   || 0);
      });
      const rawUtil = totalCreditLimit === 0
        ? 0
        : totalBalance / totalCreditLimit;
      const utilization = parseFloat(rawUtil.toFixed(4));

      // --- 4) Number of CFA or AF Cards with 0 Balance ---
      const afSnap = await db
        .collection('user_stocks_conso')
        .where('stock','==','user_credit_cards')
        .where('isAnnualFee','==',true)
        .get();
      const totalAF = afSnap.size;
      const cfaSnap = await db
        .collection('user_stocks_conso')
        .where('stock','==','user_credit_cards')
        .where('isCFA','==',true)
        .get();
      const totalCFA = cfaSnap.size;
      const totalCFA_AF = totalAF + totalCFA;

      const zbSnap = await db
        .collection('user_stocks_conso')
        .where('stock','==','user_credit_cards')
        .where('amountsOwed','==',0)
        .get();
      let numZeroBalanceCFAorAF = 0;
      zbSnap.forEach(doc => {
        const d = doc.data();
        if (d.isAnnualFee || d.isCFA) numZeroBalanceCFAorAF++;
      });
      const valueCFA_AF = totalCFA_AF === 0 ? null : numZeroBalanceCFAorAF;

      // --- 7) Months until target (NYC normalized) ---
      const now = new Date();
      const nowParts = getNYCDateParts(now);
      const nowNorm  = new Date(nowParts.y, nowParts.m - 1, nowParts.d);

      const userSnap = await db.collection('users').doc(uid).get();
      const targetMs = userSnap.data().target_date.toMillis();
      const targetRaw = new Date(targetMs);
      const tgtParts  = getNYCDateParts(targetRaw);
      const tgtNorm   = new Date(tgtParts.y, tgtParts.m - 1, tgtParts.d);

      let yearDiff   = tgtNorm.getFullYear()  - nowNorm.getFullYear();
      let monthDiff  = tgtNorm.getMonth()     - nowNorm.getMonth();
      let totalMonths= yearDiff * 12 + monthDiff;

      let dayDiff = tgtNorm.getDate() - nowNorm.getDate();
      if (dayDiff < 0) {
        totalMonths--;
        const daysInPrev = new Date(
          tgtNorm.getFullYear(),
          tgtNorm.getMonth(),
          0
        ).getDate();
        dayDiff += daysInPrev;
      }

      const daysInMonth = new Date(
        tgtNorm.getFullYear(),
        tgtNorm.getMonth() + 1,
        0
      ).getDate();

      const monthsUntilTarget = parseFloat(
        (totalMonths + dayDiff / daysInMonth).toFixed(2)
      );

      // --- 8) Yearly allowable (cards + loans opened <12mo) ---
      function monthsBetween(recordDate) {
        const recParts = getNYCDateParts(recordDate);
        const recNorm  = new Date(recParts.y, recParts.m - 1, recParts.d);
        let yDiff = nowNorm.getFullYear() - recNorm.getFullYear();
        let mDiff = nowNorm.getMonth()    - recNorm.getMonth();
        let months = yDiff * 12 + mDiff;
        let dDiff = nowNorm.getDate() - recNorm.getDate();
        if (dDiff < 0) {
          months--;
          const daysInPrev = new Date(
            recNorm.getFullYear(),
            recNorm.getMonth(),
            0
          ).getDate();
          dDiff += daysInPrev;
        }
        const dim = new Date(
          recNorm.getFullYear(),
          recNorm.getMonth() + 1,
          0
        ).getDate();
        return months + dDiff / dim;
      }

      const cardDocsLTM = await db
        .collection('user_stocks_conso')
        .where('stock','==','user_credit_cards')
        .get();
      let numberCardsLTM = 0;
      cardDocsLTM.forEach(doc => {
        const recDate = doc.data().DOFRecord.toDate();
        if (monthsBetween(recDate) < 12) numberCardsLTM++;
      });

      const loanDocsLTM = await db
        .collection('user_stocks_conso')
        .where('stock','==','user_loans')
        .get();
      let numberLoansLTM = 0;
      loanDocsLTM.forEach(doc => {
        const recDate = doc.data().DOFRecord.toDate();
        if (monthsBetween(recDate) < 12) numberLoansLTM++;
      });

      const yearlyAllowable = numberCardsLTM + numberLoansLTM;

      // --- 9) Monthly allowable (opened <30 days) ---
      const nowMs = Date.now();
      const THIRTY_DAYS = 30 * 24 * 60 * 60 * 1000;
      let numberCards30 = 0;
      cardDocsLTM.forEach(doc => {
        const recMs = doc.data().DOFRecord.toDate().getTime();
        if (nowMs - recMs < THIRTY_DAYS) numberCards30++;
      });

      let numberLoans30 = 0;
      loanDocsLTM.forEach(doc => {
        const recMs = doc.data().DOFRecord.toDate().getTime();
        if (nowMs - recMs < THIRTY_DAYS) numberLoans30++;
      });

      const monthlyAllowable = numberCards30 + numberLoans30;

      // --- 10) Min interval between opens in LTM ---
      const thresh = new Date(nowNorm);
      thresh.setMonth(thresh.getMonth() - 12);
      const threshNorm = new Date(thresh.getFullYear(), thresh.getMonth(), thresh.getDate());

      const openSnap = await db
        .collection('user_stocks_conso')
        .where('stock','in',['user_credit_cards','user_loans'])
        .get();

      const dates = openSnap.docs
        .map(doc => {
          const d = doc.data().DOFRecord.toDate();
          const { y, m, d: day } = getNYCDateParts(d);
          return new Date(y, m - 1, day);
        })
        .filter(d => d > threshNorm)
        .sort((a, b) => a - b);

      let minDiffDays = Infinity;
      for (let i = 1; i < dates.length; i++) {
        const diff = (dates[i] - dates[i - 1]) / (1000 * 60 * 60 * 24);
        if (diff < minDiffDays) minDiffDays = diff;
      }
      const minInterval = dates.length < 2
        ? null
        : parseFloat((minDiffDays / 30).toFixed(2));

      // --- Batch write all metrics ---
      const batch = db.batch();

      const mapping = {
        'Current accounts / lates': calRatio,
        'Revolving % of total': revPct,
        'Utilization': utilization,
        'Number of CFA or AF Cards with 0 Balance': valueCFA_AF
      };
      for (const [variation, value] of Object.entries(mapping)) {
        const snap = await db
          .collection('user_plan_target_constraints')
          .where('AccountType_Variation','==',variation)
          .get();
        snap.forEach(doc => {
          if (doc.data().Current_Value !== value) {
            batch.set(
              db.collection('user_plan_target_constraints').doc(doc.id),
              { Current_Value: value },
              { merge: true }
            );
          }
        });
      }

      // write open & close (monthsUntilTarget)
      const openVarSnap = await db
        .collection('user_plan_target_constraints')
        .where('AccountType_Variation','==','Latest allowable open')
        .get();
      const closeVarSnap = await db
        .collection('user_plan_target_constraints')
        .where('AccountType_Variation','==','Latest allowable close')
        .get();
      for (const snap of [openVarSnap, closeVarSnap]) {
        snap.forEach(doc => {
          if (doc.data().Current_Value !== monthsUntilTarget) {
            batch.set(
              db.collection('user_plan_target_constraints').doc(doc.id),
              { Current_Value: monthsUntilTarget },
              { merge: true }
            );
          }
        });
      }

      // write Yearly allowable
      const yearlySnap = await db
        .collection('user_plan_target_constraints')
        .where('AccountType_Variation','==','Yearly allowable')
        .get();
      yearlySnap.forEach(doc => {
        if (doc.data().Current_Value !== yearlyAllowable) {
          batch.set(
            db.collection('user_plan_target_constraints').doc(doc.id),
            { Current_Value: yearlyAllowable },
            { merge: true }
          );
        }
      });

      // write Monthly allowable
      const monthlySnap = await db
        .collection('user_plan_target_constraints')
        .where('AccountType_Variation','==','Monthly allowable')
        .get();
      monthlySnap.forEach(doc => {
        if (doc.data().Current_Value !== monthlyAllowable) {
          batch.set(
            db.collection('user_plan_target_constraints').doc(doc.id),
            { Current_Value: monthlyAllowable },
            { merge: true }
          );
        }
      });

      // write Min interval between opens in LTM
      const minSnap = await db
        .collection('user_plan_target_constraints')
        .where('AccountType_Variation','==','Min interval between opens in LTM')
        .get();
      minSnap.forEach(doc => {
        if (doc.data().Current_Value !== minInterval) {
          batch.set(
            db.collection('user_plan_target_constraints').doc(doc.id),
            { Current_Value: minInterval },
            { merge: true }
          );
        }
      });

      await batch.commit();

      return {
        success: true,
        numberCardsLTM,
        numberLoansLTM,
        yearlyAllowable,
        numberCards30,
        numberLoans30,
        monthlyAllowable,
        monthsUntilTarget,
        minInterval
      };
    } catch (err) {
      console.error('Error computing current values:', err);
      throw new functions.https.HttpsError('internal', err.message || 'Unknown error');
    }
  }
);
