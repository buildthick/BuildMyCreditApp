// This function correctly calculates
// Unique_Name = Number of Loans
// Unique_Name = Number of Credit Cards
// Unique_Name = Number of Annual Fee Cards
// Unique_Name = Number of CFA Cards
// Unique_Name = Revolving % of Total Accounts
// Unique_Name = Number of Requests in LTM
// Unique_Name = Credit Limit on Loans
// Unique_Name = Credit Limit on Credit Cards
// Unique_Name = Balance on Loans
// Unique_Name = Balance on Credit Cards
// Unique_Name = Amounts owed on card lates
// Unique_Name = Amounts owed on loan lates
// Unique_Name = Amounts owed on 
// Unique_Name = Amounts owed on account collections
// Unique_Name = Amounts owed on 3rd party collections

const functions = require('firebase-functions');
const admin = require('firebase-admin');
// To avoid deployment errors, do not call admin.initializeApp() in your code

exports.computeUserHighAchieverCurrentValues = functions
  .region('us-central1')
  .https.onCall(async (data, context) => {
    if (!context.auth || !context.auth.uid) {
      throw new functions.https.HttpsError('unauthenticated','Must be signed in.');
    }

    const uid = context.auth.uid;
    const db = admin.firestore();
    const userRef = db.doc(`users/${uid}`);

    // Fetch user's target_date
    const userSnap = await userRef.get();
    const userData = userSnap.data() || {};
    const targetTs = userData.target_date;               // Firestore Timestamp
    const targetDate = targetTs ? targetTs.toDate() : null;

    // 1) Load all user_high_achiever_targets docs
    const targetsSnap = await db.collection('user_high_achiever_targets').get();
    if (targetsSnap.empty) {
      throw new functions.https.HttpsError('not-found','No docs found in user_high_achiever_targets');
    }

    // 2) Prepare batch for updates
    const batch = db.batch();

    // Precompute cutoff for LTM and two-month window
    const now = new Date();
    const twoMonthsLater = new Date();
    twoMonthsLater.setMonth(now.getMonth() + 2);

    // 3) Loop through each doc and compute Current_Value
    for (const doc of targetsSnap.docs) {
      const data         = doc.data();
      const docRef       = db.collection('user_high_achiever_targets').doc(doc.id);
      const oldValue     = data.Current_Value;
      let   currentValue = oldValue;

      switch (data.Unique_Name) {
        case 'Number of Loans': {
          const snap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_loans')
            .where('userRef','==',userRef)
            .get();
          currentValue = snap.size;
          break;
        }

        case 'Number of Credit Cards': {
          const snap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_credit_cards')
            .where('userRef','==',userRef)
            .get();
          currentValue = snap.size;
          break;
        }

        case 'Number of Annual Fee Cards': {
          const snap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_credit_cards')
            .where('userRef','==',userRef)
            .where('isAnnualFee','==',true)
            .get();
          currentValue = snap.size;
          break;
        }

        case 'Number of CFA Cards': {
          const snap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_credit_cards')
            .where('userRef','==',userRef)
            .where('isCFA','==',true)
            .get();
          currentValue = snap.size;
          break;
        }

        case 'Number of CFA Loans': {
          // New: count loans with isCFA = true
          const snap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_loans')
            .where('userRef','==',userRef)
            .where('isCFA','==',true)
            .get();
          currentValue = snap.size;
          break;
        }

        case 'Revolving % of Total Accounts': {
          const revSnap = await db
            .collection('user_stocks_conso')
            .where('subStock','==','Revolving')
            .where('userRef','==',userRef)
            .get();
          const totalRevolving = revSnap.docs.filter(d => {
            const s = d.data().stock;
            return s!=='user_hard_pulls' && s!=='user_credit_cards_late_payments';
          }).length;

          const instSnap = await db
            .collection('user_stocks_conso')
            .where('subStock','==','Installment')
            .where('userRef','==',userRef)
            .get();
          const totalInstallment = instSnap.docs.filter(d => {
            const s = d.data().stock;
            return s!=='user_hard_pulls' && s!=='user_loans_late_payments';
          }).length;

          const totalAccounts = totalRevolving + totalInstallment;
          currentValue = totalAccounts>0 
            ? totalRevolving/totalAccounts 
            : 0;
          break;
        }

        case 'Number of Requests in LTM': {
          const pullsSnap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_hard_pulls')
            .where('userRef','==',userRef)
            .get();
          const recent = pullsSnap.docs.filter(d=>
            d.data().DOFRecord.toMillis()>= (new Date(now.getFullYear()-1, now.getMonth(), now.getDate()).getTime())
          );
          currentValue = recent.length;
          break;
        }

        case 'Credit Limit on Loans': {
          const snap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_loans')
            .where('userRef','==',userRef)
            .get();
          currentValue = snap.docs.reduce((sum,d)=>sum+(d.data().creditLimit||0),0);
          break;
        }

        case 'Credit Limit on Credit Cards': {
          const snap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_credit_cards')
            .where('userRef','==',userRef)
            .get();
          currentValue = snap.docs.reduce((sum,d)=>sum+(d.data().creditLimit||0),0);
          break;
        }

        case 'Balance on Loans': {
          const snap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_loans')
            .where('userRef','==',userRef)
            .get();
          currentValue = snap.docs.reduce((sum,d)=>sum+(d.data().amountsOwed||0),0);
          break;
        }

        case 'Balance on Credit Cards': {
          const snap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_credit_cards')
            .where('userRef','==',userRef)
            .get();
          currentValue = snap.docs.reduce((sum,d)=>sum+(d.data().amountsOwed||0),0);
          break;
        }

        case 'Amounts owed on loan lates': {
          const latesSnap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_loans_late_payments')
            .where('userRef','==',userRef)
            .get();
          let sumLoanLates=0;
          for(const lateDoc of latesSnap.docs){
            const src=(await db.collection('user_loans_late_payments').doc(lateDoc.id).get()).data()||{};
            if(!src.chargedOff&&!src.sentToCollections){
              sumLoanLates+=lateDoc.data().amountsOwed||0;
            }
          }
          currentValue=sumLoanLates;
          break;
        }

        case 'Amounts owed on card lates': {
          const latesSnap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_credit_cards_late_payments')
            .where('userRef','==',userRef)
            .get();
          let sumCardLates=0;
          for(const lateDoc of latesSnap.docs){
            const src=(await db.collection('user_credit_cards_late_payments').doc(lateDoc.id).get()).data()||{};
            if(!src.chargedOff&&!src.sentToCollections){
              sumCardLates+=lateDoc.data().amountsOwed||0;
            }
          }
          currentValue=sumCardLates;
          break;
        }

        case 'Amounts owed on account collections': {
          const latesSnap = await db
            .collection('user_stocks_conso')
            .where('stock','in',[
              'user_credit_cards_late_payments',
              'user_loans_late_payments'
            ])
            .where('userRef','==',userRef)
            .get();
          let sumCollected=0;
          for(const lateDoc of latesSnap.docs){
            const src=(await db.collection(lateDoc.data().stock).doc(lateDoc.id).get()).data()||{};
            if(src.sentToCollections){
              sumCollected+=lateDoc.data().amountsOwed||0;
            }
          }
          currentValue=sumCollected;
          break;
        }

        case 'Amounts owed on 3rd party collections': {
          const collSnap = await db
            .collection('user_stocks_conso')
            .where('stock','==','user_collections_3rd_party')
            .where('userRef','==',userRef)
            .get();
          currentValue = collSnap.docs.reduce((sum,d)=>sum+(d.data().
 amountsOwed||0),0);
          break;
        }

        case 'Number of cards used 2m to target': {
          // only if target_date within 2 months
          if (targetDate && targetDate <= twoMonthsLater) {
            const snap = await db
              .collection('user_stocks_conso')
              .where('stock','==','user_credit_cards')
              .where('userRef','==',userRef)
              .get();
            currentValue = snap.docs.filter(d => (d.data().amountsOwed || 0) > 0).length;
          } else {
            currentValue = null;
          }
          break;
        }

        default:
          continue;
      }

      // 4) Only update if changed
      if (currentValue !== oldValue) {
        batch.set(docRef,{Current_Value:currentValue},{merge:true});
      }
    }

    // 5) Commit all updates
    await batch.commit();
    return {success:true,updated:targetsSnap.size};
  });
