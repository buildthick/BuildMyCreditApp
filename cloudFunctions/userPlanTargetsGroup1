// This version does not write anything but does compute:
// unrestricted values
// days and months in plan
// blockers for open/close actions

const functions = require('firebase-functions');
const admin = require('firebase-admin');
// To avoid deployment errors, do not call admin.initializeApp() in your code

exports.userPlanTargetsGroup1 = functions
  .region('us-central1')
  .https.onCall(async (data, context) => {
    if (!context.auth || !context.auth.uid) {
      throw new functions.https.HttpsError('unauthenticated','Must be signed in.');
    }
    const uid = context.auth.uid;
    const db = admin.firestore();
    const userRef = db.doc(`users/${uid}`);

    // 1) Fetch user's target_date and compute time-left vars
    const userSnap = await userRef.get();
    const targetTs = userSnap.data()?.target_date;
    if (!targetTs) {
      throw new functions.https.HttpsError('failed-precondition','No target_date set');
    }
    const planEnd = targetTs.toDate();
    const nowNY = new Date().toLocaleString('en-US', { timeZone: 'America/New_York' });
    const nowDate = new Date(nowNY);
    const msLeft = planEnd.getTime() - nowDate.getTime();
    const daysLeftInPlan = Math.floor(msLeft / (1000 * 60 * 60 * 24));
    const monthsLeftInPlan = daysLeftInPlan / 30;

    // 2) Load all plan docs for Group 1
    const planSnap = await db
      .collection('user_plan_targets')
      .where('userRef','==', userRef)
      .where('CloudFunctionGroup','==', 1)
      .get();
    if (planSnap.empty) {
      return { success: true, processed: 0 };
    }

    // 3) Load master specs for Group 1 into a map
    const masterSnap = await db
      .collection('credit_high_achievers_targets')
      .where('CloudFunctionGroup','==', 1)
      .get();
    const masterByName = {};
    masterSnap.docs.forEach(d => {
      const m = d.data();
      masterByName[m.Unique_Name] = m;
    });

    // 4) Build planByName for quick access to Current_Value
    const planByName = {};
    planSnap.docs.forEach(d => {
      const p = d.data();
      planByName[p.Unique_Name] = p;
    });

    // 5) Compute unrestricted opens/closes
    const getMaster = name => masterByName[name]?.Target_Value || 0;
    const getCurrent = name => planByName[name]?.Current_Value || 0;

    const unrestrictedOpensInstallment  = getMaster('Number of Loans') - getCurrent('Number of Loans');
    const unrestrictedClosesInstallment = getMaster('Number of CFA Loans') - getCurrent('Number of CFA Loans');
    const unrestrictedOpensRevolving    = getMaster('Number of Credit Cards') - getCurrent('Number of Credit Cards');
    const closesAnnualFee               = getMaster('Number of Annual Fee Cards') - getCurrent('Number of Annual Fee Cards');
    const closesCFAcards                = getMaster('Number of CFA Cards') - getCurrent('Number of CFA Cards');
    const unrestrictedClosesRevolving   = closesAnnualFee + closesCFAcards;

    // 6) Load blocker constraints of interest
    const blockerVars = ['Number of CFA or AF Cards with 0 Balance','Latest allowable close','Latest allowable open'];
    const constrSnap = await db
      .collection('user_plan_target_constraints')
      .where('userRef','==',userRef)
      .where('CloudFunctionGroup','==',1)
      .where('AccountType_Variation','in',blockerVars)
      .get();

    // organize by variation
    const byVar = {};
    constrSnap.docs.forEach(d => byVar[d.data().AccountType_Variation] = d.data());

    // 7) Evaluate closeAllowed: both close blockers must pass
    let closeAllowed = true;
    ['Number of CFA or AF Cards with 0 Balance','Latest allowable close']
      .forEach(v => {
        const c = byVar[v];
        if (!c) return;
        const cur = c.Current_Value;
        const tgt = c.Value;
        if (c.Max_or_Min === 'min' ? cur < tgt : cur > tgt) {
          closeAllowed = false;
        }
      });

    // 8) Evaluate openAllowed: the open blocker must pass
    let openAllowed = true;
    const openC = byVar['Latest allowable open'];
    if (openC) {
      const cur = openC.Current_Value;
      const tgt = openC.Value;
      if (openC.Max_or_Min === 'min' ? cur < tgt : cur > tgt) {
        openAllowed = false;
      }
    }

    // 9) Return all the flags + prior variables
    return {
      success: true,
      processed: planSnap.size,
      daysLeftInPlan,
      monthsLeftInPlan,
      unrestrictedOpensInstallment,
      unrestrictedClosesInstallment,
      unrestrictedOpensRevolving,
      unrestrictedClosesRevolving,
      closeAllowed,
      openAllowed
    };
  });
