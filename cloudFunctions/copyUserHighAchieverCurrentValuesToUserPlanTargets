const functions = require('firebase-functions');
const admin = require('firebase-admin');
// To avoid deployment errors, do not call admin.initializeApp() in your code

exports.copyUserHighAchieverCurrentValuesToUserPlanTargets = functions
  .region('us-central1')
  .https.onCall(async (data, context) => {
    if (!context.auth || !context.auth.uid) {
      throw new functions.https.HttpsError('unauthenticated', 'Must be signed in.');
    }
    const uid = context.auth.uid;
    const db = admin.firestore();
    const userRef = db.doc(`users/${uid}`);

    // 1) Load all user_high_achiever_targets for this user
    const highSnap = await db
      .collection('user_high_achiever_targets')
      .where('userRef', '==', userRef)
      .get();
    if (highSnap.empty) {
      return { success: true, copied: 0, message: 'No high-achiever targets found' };
    }

    // Build map: Unique_Name -> Current_Value
    const currentMap = {};
    highSnap.docs.forEach(doc => {
      const d = doc.data();
      currentMap[d.Unique_Name] = d.Current_Value;
    });

    // 2) Load Group 1 plan targets for this user
    const planSnap = await db
      .collection('user_plan_targets')
      .where('userRef', '==', userRef)
      .where('CloudFunctionGroup', '==', 1)
      .get();
    if (planSnap.empty) {
      return { success: true, copied: 0, message: 'No Group 1 plan targets found' };
    }

    // 3) Batch‐update each plan doc with the matching Current_Value
    const batch = db.batch();
    let copied = 0;

    planSnap.docs.forEach(doc => {
      const data = doc.data();
      const name = data.Unique_Name;
      if (currentMap.hasOwnProperty(name)) {
        const planRef = db.collection('user_plan_targets').doc(doc.id);
        batch.set(
          planRef,
          { Current_Value: currentMap[name] },
          { merge: true }
        );
        copied++;
      }
    });

    await batch.commit();
    return { success: true, copied };
  });
